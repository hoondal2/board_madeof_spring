// 입과시험 준비

1. 컨트롤러 메서드에 static이 붙지 않음에도 호출 가능한 이유
    ->  메인 메서드는 객체 생성 없이 부르기 때문에 static이 항상 붙는다.
        이와 달리 컨트롤러 메서드들은 static이 붙지 않는다.
        그럼에도 호출이 가능한 이유는 어디선가 객체를 생성해주기 때문이다.

        url로 원격 프로그램을 호출하면, 톰캣에서 객체를 생성한다. 그 후에 메서드를 호출한 것이다.
        static으로 컨트롤러 메서드를 만들어도 되지만,
        iv와 cv 모두 사용 가능한 인스턴스 메서드로 만드는 게 유용하다.

2. Reflection api 설명하기
    ->  구체적인 클래스 타입을 알지 못해도 그 클래스의 정보(메서드, 타입, 변수 등)에
        접근할 수 있게 해주는 자바 API다.
        단점으로 성능 오버헤드와 private접근으로 추상화가 깨져 이로 인한 부작용 등이 있다.
        reflection api는 결론적으로 프레임워크나 라이브러리에서 많이 사용된다.
        프레임워크나 라이브러리는 사용자가 어떤 클래스를 만들지 예측할 수 없기 때문에
        이를 동적으로 해결해주기 위해 reflection을 사용한다.

        reflection이 가능한 이유는 JVM이 실행될 때 사용자가 작성한 자바 코드가
        컴파일러를 거쳐 바이트 코드로 변환되어 static 영역에 저장되기 때문이다.
        reflction api는 이 정보를 활용한다. 그래서 클래스 이름만 알고 있다면 언제든
        static영역을 뒤져서 정보를 가져올 수 있는 것이다.

        인자값에 대한 정보는 가져올 수 없기 때문에 사용자가 invoke 호출시 직접 적어야 한다.

3. http 응답 메시지
    ->  1xx : informational
        2xx : success
        3xx : Redirect -> 다른 url로 요청
        4xx : 클라이언트 에러
        5xx : 서버 에러

4. GET과 POST
    ->  GET은 서버의 리소스를 가져오기위해 설계됐다. 쿼리스트링을 통해 소용량 데이터를 전달한다.
        URL에 데이터가 노출되어 보안에 취약하다

    ->  POST는 서버에 데이터를 올리기위해 설계됐다. 전송 데이터 크기에 제한이 없으며
        데이터 요청 메시지의  body에 담아 전송해 보안에 유리하다.

5. 단일 책임의 원칙에 따라, 프로그래밍시 분리해야 할 것
    ->  1. 관심사의 분리
        2. 변하는 것과 변하지 않는 것의 분리
        3. 공통 코드(중복 코드)의 분리

6. 스프링과 서블릿, 싱글톤
    ->  서블릿 라이프싸이클을 통해 서블릿이 싱글톤 기반임을 알 수 있다. 톰캣을 실행시키고
        계속해서 새로고침하면 최초 실행시 init()이 호출되고 이후 service()가 재실행됨을 알 수 있다.
        destroy()는 톰캣을 재실행하면 호출된다.
        이는 서블릿이 1개의 인스턴스를 계속해서 재활용하고 재실행하면 버리고 다시 생성하는 것인데,
        스프링 역시 서블릿과 마찬가지로 이러한 싱글톤 기반으로 설계되었다.

        서블릿 인스턴스가 한번 생성/초기화(init())되고 나면, 두번째 호출부터는 빨라진다.
        이는 이미 생성된 서블릿 인스턴스를 재사용하기 때문인데, 생성시의 변환과 컴파일 시간이
        줄어들기 때문이다. 이미 객체가 존재하기 때문에 바로 service()가 응답해주는 것이다.
        하지만 소스가 변경되면 또 변환하고 컴파일해야 해서 다시 객체를 생성한다.

        스프링과의 차이는 여기서 발생하는데, 스프링은 기본적으로 일찍, 요청이 오지 않아도 객체를
        만들어놓기 때문에 빠르다.
        이러한 차이로 서블릿을 lazy-init(지연된 초기화), 스프링을 early-init이라 한다.

7. 유효범위 (scope)

